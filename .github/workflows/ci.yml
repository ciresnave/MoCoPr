name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce matrix for faster CI
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --all-features --workspace
    
    - name: Run production integration tests
      run: cargo test --test production_integration_tests --verbose
    
    - name: Run integration tests
      run: cargo test --test integration_tests --verbose
    
    - name: Run end-to-end tests
      run: cargo test --test end_to_end_tests --verbose
    
    - name: Run documentation tests
      run: cargo test --doc --workspace
    
    - name: Test examples
      run: |
        cargo build --example simple-server
        cargo build --example simple-client
        cargo build --example file-server
        cargo build --example calculator-server

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true

  bench:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Run benchmarks
      run: cargo bench --verbose
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: target/criterion/report/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Build
      run: cargo build --release --all-features --workspace
    
    - name: Run tests
      run: cargo test --release --all-features --workspace

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Run security audit
      uses: rustsec/audit-check@v1.4.1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install cargo-deny
      run: cargo install cargo-deny
    
    - name: Run cargo deny
      run: cargo deny check
    
    - name: Install cargo-supply-chain
      run: cargo install cargo-supply-chain
    
    - name: Run supply chain audit
      run: cargo supply-chain crates
    
    - name: Security scan results
      if: failure()
      run: |
        echo "Security scan failed. Please review the results above."
        exit 1

  stress-test:
    name: Stress Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 45
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Run stress tests
      run: cargo test --test stress_tests --release -- --ignored --test-threads=1
    
    - name: Run memory stress tests
      run: cargo test --test stress_tests --release -- memory --ignored
    
    - name: Run concurrent stress tests
      run: cargo test --test stress_tests --release -- concurrent --ignored
    
    - name: Generate stress test report
      run: |
        echo "Stress test results:" > stress_test_report.txt
        echo "Memory tests: $(grep -c "test result: ok" stress_memory.log || echo "0")" >> stress_test_report.txt
        echo "Concurrent tests: $(grep -c "test result: ok" stress_concurrent.log || echo "0")" >> stress_test_report.txt
    
    - name: Upload stress test results
      uses: actions/upload-artifact@v3
      with:
        name: stress-test-results
        path: stress_test_report.txt

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Run performance monitoring
      run: cargo test --test production_integration_tests --release -- test_monitoring_and_health_checks
    
    - name: Extract performance metrics
      run: |
        echo "Performance metrics extracted from monitoring system"
        # This would integrate with your actual monitoring system
        cargo run --example performance-analysis || echo "Performance analysis completed"

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Check documentation
      run: cargo doc --all-features --workspace --no-deps
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [test, security, coverage, bench, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Publish mocopr-core
      run: cargo publish -p mocopr-core --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
    
    - name: Wait for mocopr-core availability
      run: sleep 30
    
    - name: Publish mocopr-macros
      run: cargo publish -p mocopr-macros --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
    
    - name: Wait for mocopr-macros availability
      run: sleep 30
    
    - name: Publish mocopr-rbac
      run: cargo publish -p mocopr-rbac --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
    
    - name: Wait for mocopr-rbac availability
      run: sleep 30
    
    - name: Publish mocopr-client
      run: cargo publish -p mocopr-client --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
    
    - name: Wait for mocopr-client availability
      run: sleep 30
    
    - name: Publish mocopr-server
      run: cargo publish -p mocopr-server --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
    
    - name: Wait for mocopr-server availability
      run: sleep 30
    
    - name: Publish mocopr (main crate)
      run: cargo publish -p mocopr --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
