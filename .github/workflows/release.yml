name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Publish mocopr-core
      run: cargo publish --package mocopr-core --token ${{ secrets.CARGO_TOKEN }}
    
    - name: Wait for mocopr-core to be available
      run: sleep 30
    
    - name: Publish mocopr-macros
      run: cargo publish --package mocopr-macros --token ${{ secrets.CARGO_TOKEN }}
    
    - name: Wait for mocopr-macros to be available
      run: sleep 30
    
    - name: Publish mocopr-server
      run: cargo publish --package mocopr-server --token ${{ secrets.CARGO_TOKEN }}
    
    - name: Wait for mocopr-server to be available
      run: sleep 30
    
    - name: Publish mocopr-client
      run: cargo publish --package mocopr-client --token ${{ secrets.CARGO_TOKEN }}
    
    - name: Wait for mocopr-client to be available
      run: sleep 30
    
    - name: Publish mocopr (meta-crate)
      run: cargo publish --token ${{ secrets.CARGO_TOKEN }}

  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Build examples
      run: |
        cargo build --release --example simple-server --target ${{ matrix.target }}
        cargo build --release --example simple-client --target ${{ matrix.target }}
        cargo build --release --example calculator-server --target ${{ matrix.target }}
        cargo build --release --example file-server --target ${{ matrix.target }}
    
    - name: Package binaries
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/examples/simple-server${{ matrix.suffix }} dist/
        cp target/${{ matrix.target }}/release/examples/simple-client${{ matrix.suffix }} dist/
        cp target/${{ matrix.target }}/release/examples/calculator-server${{ matrix.suffix }} dist/
        cp target/${{ matrix.target }}/release/examples/file-server${{ matrix.suffix }} dist/
        
    - name: Create archive
      if: matrix.os != 'windows-latest'
      run: tar -czf mocopr-examples-${{ matrix.target }}.tar.gz -C dist .
      
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: Compress-Archive -Path dist\* -DestinationPath mocopr-examples-${{ matrix.target }}.zip
    
    - name: Upload Release Asset (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./mocopr-examples-${{ matrix.target }}.tar.gz
        asset_name: mocopr-examples-${{ matrix.target }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./mocopr-examples-${{ matrix.target }}.zip
        asset_name: mocopr-examples-${{ matrix.target }}.zip
        asset_content_type: application/zip
